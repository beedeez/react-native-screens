{"version":3,"names":["codegenNativeComponent","codegenNativeCommands","Commands","supportedCommands"],"sources":["SearchBarNativeComponent.ts"],"sourcesContent":["/* eslint-disable */\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\nimport type { ViewProps, ColorValue, HostComponent } from 'react-native';\nimport type {\n  WithDefault,\n  BubblingEventHandler,\n} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';\n\ntype SearchBarEvent = Readonly<{}>;\n\ntype SearchButtonPressedEvent = Readonly<{\n  text?: string;\n}>;\n\ntype ChangeTextEvent = Readonly<{\n  text?: string;\n}>;\n\ntype AutoCapitalizeType = 'none' | 'words' | 'sentences' | 'characters';\n\ninterface NativeProps extends ViewProps {\n  onFocus?: BubblingEventHandler<SearchBarEvent> | null;\n  onBlur?: BubblingEventHandler<SearchBarEvent> | null;\n  onSearchButtonPress?: BubblingEventHandler<SearchButtonPressedEvent> | null;\n  onCancelButtonPress?: BubblingEventHandler<SearchBarEvent> | null;\n  onChangeText?: BubblingEventHandler<ChangeTextEvent> | null;\n  hideWhenScrolling?: boolean;\n  autoCapitalize?: WithDefault<AutoCapitalizeType, 'none'>;\n  placeholder?: string;\n  obscureBackground?: boolean;\n  hideNavigationBar?: boolean;\n  cancelButtonText?: string;\n  // TODO: implement these on iOS\n  barTintColor?: ColorValue;\n  tintColor?: ColorValue;\n  textColor?: ColorValue;\n\n  // Android only\n  disableBackButtonOverride?: boolean;\n  // TODO: consider creating enum here\n  inputType?: string;\n  onClose?: BubblingEventHandler<SearchBarEvent> | null;\n  onOpen?: BubblingEventHandler<SearchBarEvent> | null;\n  hintTextColor?: ColorValue;\n  headerIconColor?: ColorValue;\n  shouldShowHintSearchIcon?: WithDefault<boolean, true>;\n}\n\ntype ComponentType = HostComponent<NativeProps>;\n\ninterface NativeCommands {\n  blur: (viewRef: React.ElementRef<ComponentType>) => void;\n  focus: (viewRef: React.ElementRef<ComponentType>) => void;\n  clearText: (viewRef: React.ElementRef<ComponentType>) => void;\n  toggleCancelButton: (\n    viewRef: React.ElementRef<ComponentType>,\n    flag: boolean\n  ) => void;\n}\n\nexport const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({\n  supportedCommands: ['blur', 'focus', 'clearText', 'toggleCancelButton'],\n});\n\nexport default codegenNativeComponent<NativeProps>('RNSSearchBar', {});\n"],"mappings":"AAAA;AACA,OAAOA,sBAAsB,MAAM,yDAAyD;AAM5F,OAAOC,qBAAqB,MAAM,wDAAwD;AAsD1F,OAAO,MAAMC,QAAwB,GAAGD,qBAAqB,CAAiB;EAC5EE,iBAAiB,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,oBAAoB;AACxE,CAAC,CAAC;AAEF,eAAeH,sBAAsB,CAAc,cAAc,EAAE,CAAC,CAAC,CAAC"}